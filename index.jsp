<%@ page contentType="text/html;charset=utf-8"%>
<!-- 
(1) jsp 는 자바의 클래스이므로 문법은 따라서 자바의 문법을 따른다..
	 ex) for, if 동일...당연

(2) jsp는 자바의 클래스이기는 하나, 작성할 수 있는 영역 자체가 별도로
     지원된다 
	 ● 지시영역 [%@ %] : 현재 페이지에 대한 설정, 종류,인코딩 타입
	                               다른 클래스에 대한 import 
	 ● 선언부 : [%!  %]  : 멤버변수와 멤버메서드를 작성할 수 있는 영역
	                              여기서 멤버라는 용어가 붙어있다는 것은 
								  사실 jsp 가 클래스라는 증거임..

	 ● 스크립틀릿 :[%%]  : 로직을 작성할 수 잇는 영역..
	                               jsp의 스크립틀릿은 사실 jsp가 서블릿이라는
								   클래스로 변경될때, 그 클래스가 보유한 service
								   메서드 영역이다..따라서 스크립틀릿에 안에서
								   선언된 모든 변수는 메서드의 지역변수가 된다
	 ● 표현식 :[%=%]   : out.print() 의 단축 표현식

   jsp가 클래스임에도 불구하고, 그냥 클래스를 사용하면 될텐데,
   왜 jsp를 지원하는가? 왜 만들었나?
   : 자바개발자가 아닌 사람이 javaEE기반으로 웹기술을 하려면 먼저 
   클래스에 대한 지식을 모두 알아야 하는 부담이 있다.. 따라서 jsp를 이용
   하면 클래스에 대한 지식이 없어도 웹서비스 구축이 가능함...
   우리의 최종목표?? mvc 패턴으로 구현된 spring 을 학습하는 것이고,
   이 spring 프레임웍 자체가 서블릿을 기본으로 하고 있다..

(3) 내장객체 
    jsp는 몇개되지 않는 (9개 정도) 내장 객체를 지원한다..
	● request 내장객체 
		- 클라이언트의 요청 정보를 가진 객체 
	
	● response 내장객체
		- 클라이언트에게 응답시 응답 정보를 가진 객체 

	● session 내장 객체	   
	   - 현재 클라이언트에 대한 세션 정보를 가진 객체 
	   - 서버와 클라이언트의 연결된 상태
	   - 클라이언트의 정보를 유지하는 것처럼 보여주는 효과를 낸다

	● out  
		- 클라이언트의 브라우저에 문자열을 출력하는 출력 스트림	
	
	● application 
	  - 웹어플리케이션의 전역적 정보를 가진 객체
	
	● exception

	● pageContext 

	● config
	   jsp가 서블릿으로 변경될때, 초기화에 사용되는 파라미터정보를 저장한 객체
	
	● page
	  jsp에서 서블릿을 접근하고자할때 해당 서블릿을 표현한 객체 

-->
<!doctype html>
<html lang="en">
<head>
<meta charset="UTF-8">
<title>Document</title>
</head>
<body>
나의 웹사이트 구축 성공
</body>
</html>
